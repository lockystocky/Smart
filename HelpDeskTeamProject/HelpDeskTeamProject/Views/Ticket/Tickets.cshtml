@using HelpDeskTeamProject.DataModels
@{
    string[] statusColorsArray = { StatusColors.orangered.ToString(),
        StatusColors.darkorange.ToString(),
        StatusColors.limegreen.ToString(),
        StatusColors.dimgrey.ToString() };

    string[] ticketStateNames = { TicketState.New.ToString(), TicketState.InProgress.ToString(),
        TicketState.Done.ToString(), TicketState.Rejected.ToString() };
}

<link rel="stylesheet" href="~/Content/MaterialStyles.css" type="text/css">



<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<br/>
<br />
<div class="row">
    <div class="col-md-3">
        <br />
        <div class="list-group" id="teamsmenu">

        </div>

    </div>
    <div class="col-md-9">
        <a id="managelink"></a>
        

<div id="baseDiv">
    <div id="newTicketInput" style="display: none;">

        <div class="card">
            <h5 class="headerMargin"><b>Add New Ticket</b></h5>
            <div class="inputTicketDiv">
                <textarea id="addTicketText" class="inputTicketText" placeholder="Write here your problem or suggestion..."></textarea>
            </div>
            <div style="padding-bottom: 15px; padding-right: 15px; padding-left: 15px;">
                <div class="selectType">
                    <select id="addTicketType" style="width:100%; min-width:100%; height: 20px; transition: 0.3s;">
                        <option value="0">Select type</option>
                        @for (int counter = 0; counter < ViewBag.TicketTypes.Count; counter++)
                        {
                            <option value="@(counter + 1)">@ViewBag.TicketTypes[counter].Name</option>
                        }
                    </select>
                </div>
                <div class="addButtonDiv" onclick="addTicket();">
                    <p style="padding-top: 1px;">Add</p>
                </div>
            </div>
        </div>
    </div>
    <div id="ticketsDiv">

    </div>
</div>
</div>
</div>


<script>
    var teamId;
    var emptyTeamTickets = false;
    var teamPermissions = null;

    function displayNewTicket(tickets) {
        if (emptyTeamTickets == true) {
            clearTicketsDiv();
            emptyTeamTickets = false;
        }
        var statusNames = @Html.Raw(Json.Encode(ticketStateNames));
        var statusColorsJs = @Html.Raw(Json.Encode(statusColorsArray));
        var ticketsDisplay = document.getElementById("ticketsDiv");

        if (tickets.length > 0) {
            for (var counter = 0; counter < tickets.length; counter++) {
                displayOneTicket(tickets[counter]);
            }
        }
        else {
            emptyTeamTickets = true;
            var cardDiv = document.createElement("div");
            cardDiv.className = "card";
            ticketsDisplay.appendChild(cardDiv);

            var sysMessageDiv = document.createElement("div");
            sysMessageDiv.className = "systemMessageText";
            sysMessageDiv.innerText = "This team does not have any child tickets, try adding more by clicking add button.";
            cardDiv.appendChild(sysMessageDiv);
        }
    }

    function displayOneTicket(ticket) {
        if (emptyTeamTickets == true) {
            clearTicketsDiv();
            emptyTeamTickets = false;
        }
        var tempId = ticket.Id;
        var statusNames = @Html.Raw(Json.Encode(ticketStateNames));
        var statusColorsJs = @Html.Raw(Json.Encode(statusColorsArray));
        var ticketsDisplay = document.getElementById("ticketsDiv");

        var cardDiv = document.createElement("div");
        cardDiv.className = "card";
        cardDiv.id = "ticket_" + ticket.Id;
        ticketsDisplay.appendChild(cardDiv);

        var statusRectDiv = document.createElement("div");
        statusRectDiv.className = "statusRect";
        statusRectDiv.style.backgroundColor = statusColorsJs[ticket.State];
        cardDiv.appendChild(statusRectDiv);

        var userNameDisp = document.createElement("h5");
        userNameDisp.className = "headerMargin";
        userNameDisp.innerHTML = "<b>" + ticket.UserName + "</b> <b>" + ticket.UserSurname + "</b>"
        cardDiv.appendChild(userNameDisp);

        var timeDisp = document.createElement("h5");
        timeDisp.className = "dateTime";
        timeDisp.innerText = ticket.TimeCreated;
        cardDiv.appendChild(timeDisp);

        var statusDisp = document.createElement("h5");
        statusDisp.className = "dateTime";
        statusDisp.style.color = statusColorsJs[ticket.State];
        statusDisp.innerHTML = "<b>" + statusNames[ticket.State] + "</b>"
        cardDiv.appendChild(statusDisp);

        if (ticket.CanDelete == true) {
            var deleteButton = document.createElement("h5");
            deleteButton.className = "deleteButton";
            deleteButton.innerText = "Delete";
            deleteButton.addEventListener("click", function () { deleteAndHide(tempId) });
            cardDiv.appendChild(deleteButton);
        }

        var cardText = document.createElement("div");
        cardText.className = "cardText";
        var ticketDescr = document.createElement("p");
        ticketDescr.innerText = ticket.Description;
        cardText.appendChild(ticketDescr);
        var themeText = document.createElement("div");
        themeText.className = "themeText";
        themeText.innerText = ticket.Type.Name;
        cardText.appendChild(themeText);
        cardDiv.appendChild(cardText);

        var divideLine = document.createElement("div");
        divideLine.className = "divideLine";
        cardDiv.appendChild(divideLine);

        var replyRect = document.createElement("div");
        replyRect.className = "replyRectangle";
        var showTicketText = document.createElement("div");
        showTicketText.className = "replyTextMargin";
        showTicketText.innerText = "Show";
        showTicketText.addEventListener("click", function () { showButtonClick(tempId) });
        replyRect.appendChild(showTicketText);
        if (ticket.CanEdit == true) {
            var editTicketText = document.createElement("div");
            editTicketText.className = "replyTextMargin";
            editTicketText.innerText = "Edit";
            editTicketText.addEventListener("click", function () { editButtonClick(tempId) });
            replyRect.appendChild(editTicketText);
        }
        var commentsTicketDisp = document.createElement("div");
        commentsTicketDisp.className = "replyTextMargin";
        commentsTicketDisp.innerHTML = "<img src=\"/Content/comments.png\" style=\"padding-bottom:1px;\" /><b> " + ticket.CommentsCount +"</b>"
        replyRect.appendChild(commentsTicketDisp);
        var childTicketDisp = document.createElement("div");
        childTicketDisp.className = "replyTextMargin";
        childTicketDisp.innerHTML = "<img src=\"/Content/ticket.png\" style=\"padding-bottom:1px;\" /><b> " + ticket.ChildTicketsCount + "</b>"
        replyRect.appendChild(childTicketDisp);
        cardDiv.appendChild(replyRect);
    }

    function editButtonClick(id) {
        window.location.href = "/Ticket/Edit?id=" + id;
    }

    function showButtonClick(id) {
        window.location.href = "/Ticket/ShowTicket?id=" + id;
    }

    function getTickets(teamId) {
        var uploaderUrl = "/Ticket/GetTicketsByTeam?teamId=" + teamId;
        var xhr = new XMLHttpRequest();
        xhr.open('GET', uploaderUrl, true);
        xhr.onloadend = function () {
            var parsedTickets = JSON.parse(xhr.responseText);
            if (parsedTickets != null) {
                displayNewTicket(parsedTickets);
            }
        }
        xhr.send(null);
    }

    function addTicket() {
        var textBox = document.getElementById("addTicketText");
        var typeChoser = document.getElementById("addTicketType");
        if (textBox.value == "") {
            textBox.style.border = "groove";
            textBox.style.borderColor = "orangered";
            textBox.style.borderWidth = "1.5px";
        }
        if (typeChoser.value == 0) {
            typeChoser.style.border = "groove";
            typeChoser.style.borderColor = "orangered";
            typeChoser.style.borderWidth = "1.5px";
        }
        if (textBox.value != "" && typeChoser.value != 0) {
            textBox.style.border = "";
            textBox.style.borderColor = "";
            textBox.style.borderWidth = "";
            typeChoser.style.border = "";
            typeChoser.style.borderColor = "";
            typeChoser.style.borderWidth = "";
            uploadTicket(textBox.value, typeChoser.value, teamId);
            textBox.value = "";
            typeChoser.value = "0";
        }
    }

    function uploadTicket(text,type,teamId) {
        var uploaderUrl = "/Ticket/AddTicket";
        var formData = new FormData();
        formData.append("Description", text);
        formData.append("TypeId", type);
        formData.append("BaseTicketId", null);
        formData.append("BaseTeamId", teamId);
        var xhr = new XMLHttpRequest();
        xhr.open('POST', uploaderUrl, true);
        xhr.onloadend = function () {
            var parsedTicket = JSON.parse(xhr.responseText);
            if (parsedTicket != null) {
                displayOneTicket(parsedTicket);
            }
        }
        xhr.send(formData);
    }

    function deleteAndHide(delId) {
        deleteTicket(delId);
        var delTicket = document.getElementById("ticket_" + delId);
        delTicket.style.display = "none";
    }

    function deleteTicket(id) {
        var uploaderUrl = "/Ticket/DeleteTicket?id=" + id;
        var xhr = new XMLHttpRequest();
        xhr.open('GET', uploaderUrl, true);
        xhr.onloadend = function () {
            console.log(xhr.responseText);
            var parsedResp = JSON.parse(xhr.responseText);
            if (parsedResp != null) {
                console.log("Ticket deletion result - " + parsedResp);
            }
        }
        xhr.send(null);
    }

    function showInputTicket() {
        var ticketInput = document.getElementById("newTicketInput");
        ticketInput.style.display = "";
    }

    function clearTicketsDiv() {
        var ticketsDiv = document.getElementById("ticketsDiv");
        ticketsDiv.innerHTML = "";
    }

    function getTeamPermissions(id) {
        var uploaderUrl = "/Role/GetUserTeamPermissions?teamId=" + id;
        var xhr = new XMLHttpRequest();
        xhr.open('GET', uploaderUrl, true);
        xhr.onloadend = function () {
            var parsedResp = JSON.parse(xhr.responseText);
            if (parsedResp != null) {
                teamPermissions = parsedResp;
                if (teamPermissions.CanCreateTicket == true) {
                    showInputTicket();
                }
            }
        }
        xhr.send(null);
    }

    function showByTeam(id) {
        teamId = id;
        clearTicketsDiv();
        getTickets(teamId);
        getTeamPermissions(teamId);
    }


    window.onload = showByTeam(1);









    function createTeamsMenu(teamsList) {
        $.each(teamsList, function () {
            var teamListItem = this;
            var team = teamListItem.Team;
            var menuItem = $('<div class="team-name list-group-item list-group-item-action flex-column align-items-start" style="margin-right:0px">');
            menuItem.attr('id', team.Id);
            var teamIcon = $('<img class="group-icon">');
            teamIcon.attr('src', '/Content/Icons/group_icon.png');
            var teamHeader = $('<p>');
            teamHeader.append(teamIcon);
            if (team.Name.length > 15)
                team.Name = team.Name.slice(0, 12) + "...";
            teamHeader.append(team.Name);
            menuItem.append(teamHeader);
            if (teamListItem.LastTicketText) {
                var ticketTime = $('<p class="ticket-time">').text(teamListItem.LastTicketTime);
                var lastMessage = teamListItem.LastTicketAuthor + ": " + teamListItem.LastTicketText;
                if (lastMessage > 50)
                    lastMessage = lastMessage.slice(0, 47) + "...";
                var ticketText = $('<p class="ticket-text">').text(lastMessage);
                menuItem.append(ticketTime);
                menuItem.append(ticketText);
            }

            $('#teamsmenu').append(menuItem);
            menuItem.click(function () {
                var shaded = $('.shade:last').removeClass('shade');
                $(this).addClass('shade');
                var team_id = $(this).attr('id');
                
                 //here must be call of Andrew function to show tickets of team
                showByTeam(team_id);
                getManageTeamLink(team_id);

            });
        });
    };

    function getTeamsListAndCreateTeamsMenu() {
        $.getJSON("/Teams/GetCurrentUserTeamsList/")
            .done(function (teamsList) {
                createTeamsMenu(teamsList);
            });
    };

    function getManageTeamLink(teamId) {        
        $.get("/teams/GetTeamManagementLink?_teamId=" + teamId, function (data) {
            if (data) {
                $('#managelink').text('Manage team');
                $('#managelink').attr('href', data);
            }
            else {
                $('#managelink').text('');
                $('#managelink').attr('href', '');
            }
           
        });

    }

    $(function () {
        getTeamsListAndCreateTeamsMenu();
    });

</script>



